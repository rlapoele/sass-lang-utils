/// The _slu-list-reduce-right_ function executes a provided reducer function on each item of the list resulting in a single output value.
/// @group list
/// @since 1.0.0
/// @param {list} $list - the list which must be reduced.
/// @param {string} $reduce-function-name - the reducer name.
/// @param {any} $reduce-accumulator-initial-value - the accumulator initial value. Is set to the last list item's value if null.
/// @param {arglist} $reduce-function-args - a list of all parameters that must be passed to the reducer in addition to the accumulator. The accumulator is always passed as the first reducer's argument.
/// @returns {any} the accumulated/reduced value.
/// @example scss - slu-list-reduce-right function:
///
///   $numbers: 1, 2, 3, 4;
///
///   @function sum($x, $y) {
///     @return $x + $y;
///   }
///
///   $sum: slu-list-reduce-right($numbers, sum, null, item); // <-- null gets replaced by 4 (the last $numbers element).
///
///   @debug inspect($sum); // terminal/console output: 14
///
@function slu-list-reduce-right(
  $list,
  $reduce-function-name,
  $reduce-accumulator-initial-value,
  $reduce-function-args...
) {
  $_reduce-accumulator: null;
  $_list-length: length($list);
  @if(0 < $_list-length) {
    $_reduce-accumulator: if(type-of(null) == type-of($reduce-accumulator-initial-value), nth($list,-1), $reduce-accumulator-initial-value);
    $_reduce-function-args: join($_reduce-accumulator, $reduce-function-args);
    @for $_list-index from $_list-length to 0 {
      $_arg-index: 1;
      @each $_arg in $_reduce-function-args {
        @if (item == $_arg) {
          $_reduce-function-args: set-nth($_reduce-function-args, $_arg-index, nth($list, $_list-index));
        }
        @if ((index == $_arg) or (item-index == $_arg) or (list-item-index == $_arg)) {
          $_reduce-function-args: set-nth($_reduce-function-args, $_arg-index, $_list-index);
        }
        @if ((list == $_arg) or (collection == $_arg)) {
          $_reduce-function-args: set-nth($_reduce-function-args, $_arg-index, $list);
        }
        $_arg-index: $_arg-index + 1;
      }
      $_reduce-accumulator: call(get-function($reduce-function-name), $_reduce-function-args...);
      $_reduce-function-args: join($_reduce-accumulator, $reduce-function-args);
    }
  }
  @return $_reduce-accumulator;
}

